#!/usr/bin/env python3

import subprocess
import sys
import time
import tempfile
from argparse import ArgumentParser, REMAINDER
from pathlib import Path

def bytesToMB(n):
    return n / (1024*1024)


def getFileSize(src):
    return Path(src).stat().st_size


def getPathSize(src):
    src = Path(src)

    size = None

    if src.is_file():
        size = getFileSize(src)

    elif src.is_dir():
        size = sum(getFileSize(x) for x in Path(src).rglob('*'))

    else:
        print('we got here')

    return size


def runCommand(args):
    print(f'Running command: {args}')

    start = time.perf_counter()

    subprocess.run(
        args,
        stderr=subprocess.STDOUT,
        stdout=subprocess.DEVNULL
    )

    end = time.perf_counter() - start
    return end


def do7zip(src, dst, *args):
    cmd = (
        '7zz',
        'a',
        *args,
        dst,
        src
    )
    return runCommand(cmd)


def doNanoZip(src, dst, *args):
    cmd = (
        'nz',
        'a',
        *args,
        dst,
        src
    )
    return runCommand(cmd)


def doZip(src, dst, *args):
    cmd = (
        'zip',
        *args,
        dst,
        src
    )
    return runCommand(cmd)


def doZpaq(src, dst, *args):
    cmd = (
        'zpaq',
        'a',
        dst,
        src,
        *args
    )
    return runCommand(cmd)


def doBrotli(src, dst, *args):
    cmd = (
        'brotli',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def doBzip3(src, dst, *args):
    cmd = (
        'bzip3',
        *args,
        src
    )
    return runCommand(cmd)


def doCmix(src, dst, *args):
    cmd = (
        'cmix',
        *args,
        src,
        dst
    )
    return runCommand(cmd)


def doFxz(src, dst, *args):
    cmd = (
        'fxz',
        *args,
        src
    )
    return runCommand(cmd)


def doLizard(src, dst, *args):
    cmd = (
        'lizard',
        *args,
        src,
        dst
    )
    return runCommand(cmd)


def doLrzipNext(src, dst, *args):
    cmd = (
        'lrzip-next',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def doLZ4(src, dst, *args):
    cmd = (
        'lz4',
        *args,
        src,
        dst
    )
    return runCommand(cmd)


def doLzop(src, dst, *args):
    cmd = (
        'lzop',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def doPBzip2(src, dst, *args):
    cmd = (
        'pbzip2',
        *args,
        src
    )
    return runCommand(cmd)


def doPigz(src, dst, *args):
    cmd = (
        'pigz',
        *args,
        src
    )
    return runCommand(cmd)


def doPLzip(src, dst, *args):
    cmd = (
        'plzip',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def doRzip64(src, dst, *args):
    cmd = (
        'rzip64',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def doZstd(src, dst, *args):
    cmd = (
        'zstd',
        *args,
        '-o',
        dst,
        src
    )
    return runCommand(cmd)


def go(func, src, dst, *args):
    in_size = getPathSize(src)
    in_size_str = f'{round(bytesToMB(in_size), 2)} MB'

    duration = round(func(src, dst, *args), 4)
    duration_str = f'{duration} sec(s)'

    out_size = getPathSize(dst)
    out_size_str = f'{round(bytesToMB(out_size), 2)} MB'

    speed = (out_size / duration) / (1024*1024)
    speed_str = f'{round(speed, 2)} MB/s'

    compression = ((out_size / in_size) * 100) - 100
    compression_str = f'{round(compression, 2)}%'

    print(
        func.__name__,
        duration_str,
        compression_str,
        in_size_str,
        out_size_str,
        speed_str
    )


def getPrograms():
    functions = []

    for name, obj in globals().items():
        if name.startswith('do'):
            functions.append((name, obj))

    return tuple(functions)


def main():
    parser = ArgumentParser()

    parser.add_argument('-i', nargs=1, metavar='input')
    parser.add_argument('-o', nargs=1, metavar='output')

    parser.add_argument('-a', nargs=REMAINDER, metavar='args')

    for program, function in getPrograms():
        parser.add_argument(f'-{program}', action='store_true')

    args = vars(parser.parse_args())

    if args['i'] and args['o']:
        selected = None

        for program in args:
            if program.startswith('do'):
                if args[program]:
                    selected = program
                    break

        if not selected:
            parser.print_help()

        else:
            func = None

            for program, function in getPrograms():
                if function.__name__ == selected:
                    func = function
                    break

            if not func:
                raise Exception('Could not find function!')

            if not args['a']:
                go(func, args['i'][0], args['o'][0])

            else:
                go(func, args['i'][0], args['o'][0], *args['a'])

    else:
        parser.print_help()


if __name__ == '__main__':
    main()

