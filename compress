#!/usr/bin/env python3

import os
import shutil
import subprocess
import timeit
from argparse import ArgumentParser
from pathlib import Path

programs = {
    'fast': {
        'tar': (
            'brotli-fastest',
            'bzip3-compress',
            'fxz-fastest',
            'lizard-fastest',
            'lrzip-next-lzma-fastest',
            'lrzip-next-zpaq-fastest',
            'lz4-fast',
            'lzop-fastest',
            'pbzip2-fastest',
            'pigz-fastest',
            'plzip-fastest',
            'rzip64-fastest',
            'zstdmt-fast'
        ),
        'no tar': (
            '7zz-fastest',
            'nz-fastest',
            'zip-fastest',
            'zpaq-fastest'
        )
    },
    'max': {
        'tar': (
            'brotli-max',
            'bzip3-compress',
            'fxz-max',
            'lizard-max',
            'lrzip-next-lzma-max',
            'lrzip-next-zpaq-max',
            'lz4-max',
            'lzop-max',
            'pbzip2-max',
            'pigz-max',
            'plzip-max',
            'rzip64-max',
            'zstdmt-max'
        ),
        'no tar': (
            '7zz-max',
            'nz-max',
            'zip-max',
            'zpaq-max'
        )
    },
    'extensions': {
        '7zz': '7z',
        'brotli': 'br',
        'bzip3': 'bz3',
        'fxz': 'xz',
        'lizard': 'liz',
        'lrzip-next': 'lrz',
        'lz4': 'lz4',
        'lzop': 'lzo',
        'nz': 'nz',
        'pbzip2': 'bz2',
        'pigz': 'gz',
        'plzip': 'lz',
        'rzip64': 'rz',
        'zip': 'zip',
        'zpaq': 'zpaq',
        'zstdmt': 'zst'
    }
}


def runCMD(args: tuple) -> None:
    subprocess.run(args)


def makeTar(path: str) -> None:
    cmd = (
        'tar',
        'cf',
        f'{path}.tar',
        path
    )
    runCMD(cmd)


def getFileSize(path: str) -> int:
    return Path(path).stat().st_size


def renameFile(path: str, new: str) -> None:
    shutil.move(path, new)


def compress(path: str, level: str) -> dict:
    valid_levels = ('fast', 'max')

    if level not in valid_levels:
        raise Exception

    path = Path(path)
    path_parent = path.parent.resolve()
    path_name = path.name

    cwd = Path().resolve()

    if cwd != path_parent:
        # path is NOT inside current directory
        os.chdir(path_parent)
        cwd_test = Path().resolve()

        if cwd_test != path_parent:
            raise Exception('Failed to change directory!')
    elif cwd == path_parent:
        # path IS inside the directory where already in
        pass
    else:
        raise Exception('We got here')

    methods_tar = programs[level]['tar']
    methods_archiver = programs[level]['no tar']

    results = {}

    for archiver in methods_archiver:
        cmd = (archiver, path_name)

        archiver_name = archiver.split('-')[0]
        extension = programs['extensions'][archiver_name]
        full_name = f'{path}.{extension}'

        duration = timeit.timeit(lambda: runCMD(cmd), number=1)
        size = getFileSize(full_name)

        results[archiver_name] = {
            'time': float(f'{duration:.6f}'),
            'size': size
        }

    tar_path = f'{path_name}.tar'
    makeTar(path_name)

    for compressor in methods_tar:
        cmd = (compressor, tar_path)

        compressor_name = compressor.split('-')

        if len(compressor_name) == 2:
            compressor_name = compressor_name[0]
        else:
            compressor_name = '-'.join(compressor_name[:2])

        extension = programs['extensions'][compressor_name]
        full_name = f'{tar_path}.{extension}'

        duration = timeit.timeit(lambda: runCMD(cmd), number=1)

        # FIXME
        # lrzip-next-lzma works but lrzip-next-zpaq fails to write the file -___-

        if compressor_name == 'lrzip-next':
            try:
                lrz_method = compressor.split('-')[2]
                new_name = full_name.replace('.lrz', f'.{lrz_method}.lrz')
                renameFile(full_name, new_name)
                size = getFileSize(new_name)

                # This is probably not a good way to do this
                compressor_name = f'{compressor_name}-{lrz_method}'
            except FileNotFoundError:
                continue
        else:
            size = getFileSize(full_name)

        results[compressor_name] = {
            'time': float(f'{duration:.6f}'),
            'size': size
        }

    Path(tar_path).unlink()

    return results


def findBestMethod(results: dict) -> tuple:
    smallest_size = float('inf')
    mean_time = sum(result['time'] for result in results.values()) / len(results)
    best_method = None

    for method, result in results.items():
        if result['size'] < smallest_size and result['time'] < mean_time:
            smallest_size = result['size']
            best_method = method

    best = (best_method, smallest_size, float(f'{mean_time:.6f}'))

    if best_method:
        return best
    else:
        return None


def main() -> None:
    parser = ArgumentParser()
    parser.add_argument('-i', nargs=1, type=str, required=True)
    parser.add_argument('--fast', action='store_true')
    parser.add_argument('--max', action='store_true')
    args = parser.parse_args()

    if args.fast:
        results = compress(args.i[0], 'fast')
    elif args.max:
        results = compress(args.i[0], 'max')
    else:
        parser.print_help()

    best_method = findBestMethod(results)

    if best_method:
        print(best_method)
    else:
        print('Huh? No best method found?')


if __name__ == '__main__':
    main()
