#!/usr/bin/env python3

import subprocess
import sys
import time
from argparse import ArgumentParser, REMAINDER
from pathlib import Path
from typing import Generator

SUFFIXES = {
    'KIB': 2 ** 10,
    'MIB': 2 ** 20,
    'GIB': 2 ** 30
}

KIB = SUFFIXES['KIB']
MIB = SUFFIXES['MIB']
GIB = SUFFIXES['GIB']


def determineNumberSuffix(number: float) -> str:
    suffix = ''

    if number < MIB:
        suffix += 'KIB'

    elif number >= MIB and number < GIB:
        suffix += 'MIB'

    elif number >= GIB:
        suffix += 'GIB'

    else:
        raise Exception('How did we get here?')

    return suffix


def divideNumberAndFormat(number: float) -> tuple[float, str]:
    suffix = determineNumberSuffix(number)
    number = number / SUFFIXES[suffix]
    return number, suffix


def multiplyNumberAndFormat(number: float, suffix: str) -> tuple[float, str]:
    number = number * SUFFIXES[suffix]
    return number, suffix


def formatDirectorySize(n: float, blocksize: float, blocks: float) -> float:
    # This is to provide a "du -sh" like output
    stat_size = (blocks * blocksize) / KIB
    size, suffix = divideNumberAndFormat(n)
    real, _ = multiplyNumberAndFormat(size % stat_size, suffix)
    return real


def getFileSize(path: Path) -> int:
    size = 0

    if not path.is_file():
        return size

    size += path.stat().st_size
    return size


def getDirectoryContents(directory: Path) -> Generator | None:
    if not directory.is_dir():
        return

    contents = directory.rglob('*')
    return contents


def getDirectorySize(directory: Path) -> int:
    # stat = directory.stat()

    # blocks = stat.st_blocks
    # blocksize = stat.st_blksize

    sizes = 0
    contents = getDirectoryContents(directory)

    if not contents:
        # "directory" is not a directory!
        return sizes

    for path in contents:
        path_size = getFileSize(path)
        sizes += path_size

    # formatted = formatDirectorySize(sizes, blocksize, blocks)

    return sizes


def getPathSize(path: Path) -> int:
    size = 0

    if path.is_dir():
        size += getDirectorySize(path)
    else:
        size += getFileSize(path)

    return size


def getCompression(input_size: int, output_size: int) -> float:
    compression = 0

    if input_size == output_size:
        return compression

    if input_size > output_size:
        # Compression
        compression += 100 - ((output_size / input_size) * 100)
    else:
        # Decompression
        compression += 100 - ((input_size / output_size) * 100)

    return compression


def getSpeed(size: float, duration: float) -> float:
    speed = size / duration
    return speed


def determineScore(speed: float, compression: float) -> float:
    score = (speed / GIB) * compression
    return score


def runCommand(command: list[str]) -> float:
    start = time.perf_counter()
    subprocess.run(command)
    end = time.perf_counter() - start
    return end


def printMessage(message: str) -> int:
    return sys.stderr.write(f'{message}\n')


def formatNumber(number: float) -> str:
    formatted, suffix = divideNumberAndFormat(number)
    string = f'{formatted:.2f} {suffix}'
    return string


def formatDuration(number: float) -> str:
    DAY = 86_400
    HOUR = 3_600
    MINUTE = 60

    tmp = number

    days = 0
    hours = 0
    minutes = 0
    seconds = 0

    string = ''

    if tmp % DAY != tmp:
        days, remainder = divmod(tmp, DAY)

        string += str(f'{days:.0f} day(s)')

        if remainder != 0:
            tmp = remainder

    if tmp % HOUR != tmp:
        hours, remainder = divmod(tmp, HOUR)

        string += str(f' {hours:.0f} hour(s)')

        if remainder != 0:
            tmp = remainder

    if tmp % MINUTE != tmp:
        minutes, remainder = divmod(tmp, MINUTE)

        string += str(f' {minutes:.0f} minute(s)')

        if remainder != 0:
            tmp = remainder

    if tmp != 0:
        # I'm sure this can be made better
        seconds = tmp
        string += str(f' {seconds:.0f} second(s)')

    string = string.strip()

    return string


def printResults(
    command: str,
    input_size: str,
    output_size: str,
    compression: str,
    duration: str,
    speed: str,
    score: str
) -> None:

    printMessage(f'Command: {command}')
    printMessage(f'Input: {input_size}')
    printMessage(f'Output: {output_size}')
    printMessage(f'Compression: {compression}')
    printMessage(f'Duration: {duration}')
    printMessage(f'Speed: {speed}')
    printMessage(f'Score: {score}')


def go(input_path: Path, output_path: Path, args: list[str]) -> None:
    symbols = ('(in)', '(out)')

    if symbols[0] not in args:
        printMessage(f'"{symbols[0]}" MUST be passed!')
        return

    args[args.index(symbols[0])] = str(input_path)

    if symbols[1] in args:
        args[args.index(symbols[1])] = str(output_path)

    input_size = getPathSize(input_path)

    duration = runCommand(args)

    speed = getSpeed(input_size, duration)

    output_size = getPathSize(output_path)

    compression = getCompression(input_size, output_size)

    score = determineScore(speed, compression)

    results = (
        ' '.join(args),
        formatNumber(input_size),
        formatNumber(output_size),
        f'{compression:.2f}%',
        formatDuration(duration),
        f'{formatNumber(speed)}/s',
        f'{score:.4f}'
    )

    printResults(*results)


def main() -> None:
    parser = ArgumentParser()

    parser.add_argument('-i', nargs=1, metavar='input')
    parser.add_argument('-o', nargs=1, metavar='output')
    parser.add_argument('-args', nargs=REMAINDER)

    args = parser.parse_args()

    if not all((args.i, args.o, args.args)):
        parser.print_help()
        return

    go(Path(args.i[0]), Path(args.o[0]), args.args)


if __name__ == '__main__':
    main()
